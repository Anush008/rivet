"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6828],{6425:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>r,default:()=>g,frontMatter:()=>i,metadata:()=>p,toc:()=>d});var s=a(373),n=(a(5227),a(6593)),o=a(6663),l=a(7026);a(4198);const i={id:"assemble-prompt",title:"Assemble Prompt Node",sidebar_label:"Assemble Prompt"},r=void 0,p={unversionedId:"node-reference/assemble-prompt",id:"node-reference/assemble-prompt",title:"Assemble Prompt Node",description:"Overview",source:"@site/docs/node-reference/assemble-prompt.mdx",sourceDirName:"node-reference",slug:"/node-reference/assemble-prompt",permalink:"/node-reference/assemble-prompt",draft:!1,editUrl:"https://github.com/ironclad/rivet/tree/main/packages/docs/docs/node-reference/assemble-prompt.mdx",tags:[],version:"current",frontMatter:{id:"assemble-prompt",title:"Assemble Prompt Node",sidebar_label:"Assemble Prompt"},sidebar:"nodeReference",previous:{title:"Chat",permalink:"/node-reference/chat"},next:{title:"Trim Chat Messages",permalink:"/node-reference/trim-chat-messages"}},m={},d=[{value:"Overview",id:"overview",level:2},{value:"Inputs",id:"inputs",level:2},{value:"Outputs",id:"outputs",level:2},{value:"Editor Settings",id:"editor-settings",level:2},{value:"Example: Assembling Multiple Chat Messages",id:"example-assembling-multiple-chat-messages",level:3},{value:"Example: Appending Chat Messages in a Loop",id:"example-appending-chat-messages-in-a-loop",level:3},{value:"Handling Missing Inputs",id:"handling-missing-inputs",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"See Also",id:"see-also",level:2}],u={toc:d},h="wrapper";function g(e){let{components:t,...i}=e;return(0,n.kt)(h,(0,s.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"overview"},"Overview"),(0,n.kt)("p",null,"A ",(0,n.kt)("a",{parentName:"p",href:"./chat"},"Chat Node")," takes in a single Prompt input which can be a single message, or an array of messages that forms the message chain. The Assemble Prompt Node is used to assemble multiple chat messages into a single prompt. It takes multiple chat messages or strings as inputs and outputs a single prompt containing all the messages."),(0,n.kt)("p",null,"If a string is connected to any of the inputs, it will be converted to a User type chat message with the string as the message."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Assemble Prompt Node Screenshot",src:a(4131).Z,width:"684",height:"636"})),(0,n.kt)(o.Z,{defaultValue:"inputs",values:[{label:"Inputs",value:"inputs"},{label:"Outputs",value:"outputs"},{label:"Editor Settings",value:"settings"}],mdxType:"Tabs"},(0,n.kt)(l.Z,{value:"inputs",mdxType:"TabItem"},(0,n.kt)("h2",{id:"inputs"},"Inputs"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Title"),(0,n.kt)("th",{parentName:"tr",align:null},"Data Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"),(0,n.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,n.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Message ","[i]"),(0,n.kt)("td",{parentName:"tr",align:null},"chat-message, chat-message[]"),(0,n.kt)("td",{parentName:"tr",align:null},"The ith chat message input to be assembled"),(0,n.kt)("td",{parentName:"tr",align:null},"N/A"),(0,n.kt)("td",{parentName:"tr",align:null},"Dynamic number of inputs based on how many connections there are"))))),(0,n.kt)(l.Z,{value:"outputs",mdxType:"TabItem"},(0,n.kt)("h2",{id:"outputs"},"Outputs"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Title"),(0,n.kt)("th",{parentName:"tr",align:null},"Data Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"),(0,n.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Prompt"),(0,n.kt)("td",{parentName:"tr",align:null},"chat-message[]"),(0,n.kt)("td",{parentName:"tr",align:null},"The assembled chat messages"),(0,n.kt)("td",{parentName:"tr",align:null},"The output will be a single prompt resulting from assembling all valid chat messages"))))),(0,n.kt)(l.Z,{value:"settings",mdxType:"TabItem"},(0,n.kt)("h2",{id:"editor-settings"},"Editor Settings"),(0,n.kt)("p",null,"This node does not have any specific settings."))),(0,n.kt)("h3",{id:"example-assembling-multiple-chat-messages"},"Example: Assembling Multiple Chat Messages"),(0,n.kt)("p",null,"Let's say you have two ",(0,n.kt)("a",{parentName:"p",href:"./prompt"},"Prompt nodes"),': one with the the AI\'s text "How can I assist you today?" and the user\'s response "Hello". If you want to assemble these two messages into a single prompt to feed into a Chat Node, you can do the following:'),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Add an Assemble Prompt Node to your graph."),(0,n.kt)("li",{parentName:"ol"},"Connect the output of the first Prompt node (AI's message) to ",(0,n.kt)("inlineCode",{parentName:"li"},"Message 1")," of the Assemble Prompt Node."),(0,n.kt)("li",{parentName:"ol"},"Connect the output of the second Prompt node (user's response) to ",(0,n.kt)("inlineCode",{parentName:"li"},"Message 2")," of the Assemble Prompt Node."),(0,n.kt)("li",{parentName:"ol"},"Connect the output of the Assemble Prompt Node to the ",(0,n.kt)("inlineCode",{parentName:"li"},"Prompt")," input of a Chat Node.")),(0,n.kt)("h3",{id:"example-appending-chat-messages-in-a-loop"},"Example: Appending Chat Messages in a Loop"),(0,n.kt)("p",null,"A common use case for the Assemble Prompt Node is to append chat messages in a loop. This can be achieved by using a Loop Controller Node in conjunction with the Assemble Prompt Node."),(0,n.kt)("p",null,"Here's how you can set this up:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Add a Loop Controller Node to your graph."),(0,n.kt)("li",{parentName:"ol"},"Add an Assemble Prompt Node to your graph."),(0,n.kt)("li",{parentName:"ol"},"Connect the ",(0,n.kt)("inlineCode",{parentName:"li"},"Output 1")," of the Loop Controller Node to ",(0,n.kt)("inlineCode",{parentName:"li"},"Input 1")," of the Assemble Prompt Node. This will feed the output of the loop back into the Assemble Prompt Node."),(0,n.kt)("li",{parentName:"ol"},"Connect the ",(0,n.kt)("inlineCode",{parentName:"li"},"Output 1")," of the Assemble Prompt Node to ",(0,n.kt)("inlineCode",{parentName:"li"},"Input 1")," of the Loop Controller Node. This will effectively create a feedback loop where the Assemble Prompt Node feeds back into itself."),(0,n.kt)("li",{parentName:"ol"},"Connect your first message to ",(0,n.kt)("inlineCode",{parentName:"li"},"Input 1 Default")," of the Loop Controller Node. This will be the initial message that starts the loop."),(0,n.kt)("li",{parentName:"ol"},"Any additional messages that you want to append during each loop iteration can be connected to ",(0,n.kt)("inlineCode",{parentName:"li"},"Input 2"),", ",(0,n.kt)("inlineCode",{parentName:"li"},"Input 3"),", etc of the Assemble Prompt Node.")),(0,n.kt)("p",null,"The Assemble Prompt Node will flatten the output, resulting in a list of the current messages. During each loop iteration, the Assemble Prompt Node will append any additional messages connected to its inputs."),(0,n.kt)("p",null,"This setup allows you to dynamically append chat messages in a loop, which can be useful in various scenarios such as creating a chatbot that can carry on a conversation with a user."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Note:")," If you want to control the number of loop iterations, you can do so by setting the ",(0,n.kt)("inlineCode",{parentName:"p"},"Max Iterations")," property of the Loop Controller Node."),(0,n.kt)("p",null,"Here's a diagram to help visualize the setup:"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Loop Controller with Assemble Prompt Node",src:a(5568).Z,width:"2098",height:"874"})),(0,n.kt)("p",null,"This example demonstrates the power and flexibility of Rivet's node-based system, allowing you to create complex behaviors with just a few nodes."),(0,n.kt)("h3",{id:"handling-missing-inputs"},"Handling Missing Inputs"),(0,n.kt)("p",null,"If an input is missing or not a chat message, the Assemble Prompt Node will simply ignore it during the assembling process. This can be useful when dealing with optional inputs that may not always be present."),(0,n.kt)("h2",{id:"error-handling"},"Error Handling"),(0,n.kt)("p",null,"If no valid chat message inputs are provided, the output will be an empty array."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Q: What happens if I connect a non-chat message to the Assemble Prompt Node?")),(0,n.kt)("p",null,"A: The Assemble Prompt Node is designed to work with chat message inputs. If a non-chat message input is connected, the node will attempt to convert it to a chat message. In most cases, this will be a User type message with message being the data converted to a string. If this conversion isn't possible, the input will be ignored during the assembling process."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Q: Can I connect an Array Node to the Assemble Prompt Node?")),(0,n.kt)("p",null,"A: Yes, you can connect an Array Node to the Assemble Prompt Node. Each element of the array will be treated as a separate chat message to be assembled (flattens the array)."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Q: How does the Assemble Prompt Node handle empty strings or null values?")),(0,n.kt)("p",null,"A: The Assemble Prompt Node will ignore any inputs that are null or not a chat message. Empty chat messages, however, will be included in the assembling operation."),(0,n.kt)("h2",{id:"see-also"},"See Also"))}g.isMDXComponent=!0},5568:(e,t,a)=>{a.d(t,{Z:()=>s});const s=a.p+"assets/images/assemble-prompt-node-example-02-58281e375e9beb27853612bdc6383d78.png"},4131:(e,t,a)=>{a.d(t,{Z:()=>s});const s=a.p+"assets/images/assemble-prompt-node-5c657f5eaed8b0847daaf9835178e1c7.png"}}]);