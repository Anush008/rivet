"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5913],{7785:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>k,frontMatter:()=>r,metadata:()=>d,toc:()=>u});var a=n(373),i=(n(5227),n(6593)),o=n(6663),l=n(7026);n(4198);const r={id:"join",title:"Join Node",sidebar_label:"Join"},p=void 0,d={unversionedId:"node-reference/join",id:"node-reference/join",title:"Join Node",description:"Overview",source:"@site/docs/node-reference/join.mdx",sourceDirName:"node-reference",slug:"/node-reference/join",permalink:"/node-reference/join",draft:!1,editUrl:"https://github.com/ironclad/rivet/tree/main/packages/docs/docs/node-reference/join.mdx",tags:[],version:"current",frontMatter:{id:"join",title:"Join Node",sidebar_label:"Join"},sidebar:"nodeReference",previous:{title:"To JSON",permalink:"/node-reference/to-json"},next:{title:"Chat",permalink:"/node-reference/chat"}},s={},u=[{value:"Overview",id:"overview",level:2},{value:"Inputs",id:"inputs",level:2},{value:"Outputs",id:"outputs",level:2},{value:"Editor Settings",id:"editor-settings",level:2},{value:"Example 1: Joining Two Text Nodes",id:"example-1-joining-two-text-nodes",level:3},{value:"Example 2: Joining an Array with a Custom Delimiter",id:"example-2-joining-an-array-with-a-custom-delimiter",level:3},{value:"Example 3: Connecting a Split Node to a Join Node",id:"example-3-connecting-a-split-node-to-a-join-node",level:3},{value:"Flattening Arrays",id:"flattening-arrays",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"See Also",id:"see-also",level:2}],m={toc:u},h="wrapper";function k(e){let{components:t,...r}=e;return(0,i.kt)(h,(0,a.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,"The Join Node is used to concatenate multiple strings using a specified delimiter. The delimiter can be set directly in the node or provided as an input."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Join Node Screenshot",src:n(1350).Z,width:"662",height:"556"})),(0,i.kt)(o.Z,{defaultValue:"inputs",values:[{label:"Inputs",value:"inputs"},{label:"Outputs",value:"outputs"},{label:"Editor Settings",value:"settings"}],mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"inputs",mdxType:"TabItem"},(0,i.kt)("h2",{id:"inputs"},"Inputs"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Title"),(0,i.kt)("th",{parentName:"tr",align:null},"Data Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,i.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Join String (optional)"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"The string to be used as a delimiter when ",(0,i.kt)("inlineCode",{parentName:"td"},"Use Join String Input")," is enabled"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"\\n")),(0,i.kt)("td",{parentName:"tr",align:null},"Only appears if the ",(0,i.kt)("inlineCode",{parentName:"td"},"Use Join String Input")," setting is enabled")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Input ","[i]"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"The ith string input to be joined"),(0,i.kt)("td",{parentName:"tr",align:null},"N/A"),(0,i.kt)("td",{parentName:"tr",align:null},"Dynamic number of inputs based on how many connections there are"))))),(0,i.kt)(l.Z,{value:"outputs",mdxType:"TabItem"},(0,i.kt)("h2",{id:"outputs"},"Outputs"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Title"),(0,i.kt)("th",{parentName:"tr",align:null},"Data Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Joined"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"The concatenated string"),(0,i.kt)("td",{parentName:"tr",align:null},"The output will be a single string resulting from joining all valid string inputs"))))),(0,i.kt)(l.Z,{value:"settings",mdxType:"TabItem"},(0,i.kt)("h2",{id:"editor-settings"},"Editor Settings"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Setting"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,i.kt)("th",{parentName:"tr",align:null},"Use Input Toggle"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Flatten"),(0,i.kt)("td",{parentName:"tr",align:null},"If enabled, array inputs will be flattened before joining"),(0,i.kt)("td",{parentName:"tr",align:null},"true"),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Join String"),(0,i.kt)("td",{parentName:"tr",align:null},"The string to be used as a delimiter when joining inputs"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"\\n")),(0,i.kt)("td",{parentName:"tr",align:null},"Yes")))))),(0,i.kt)("h3",{id:"example-1-joining-two-text-nodes"},"Example 1: Joining Two Text Nodes"),(0,i.kt)("p",null,"Let's say you have two Text nodes: one with the value ",(0,i.kt)("inlineCode",{parentName:"p"},'"Hello"')," and the other with the value ",(0,i.kt)("inlineCode",{parentName:"p"},'"World"'),". If you want to concatenate these two strings with a newline in between, you can do the following:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Add a Join Node to your graph."),(0,i.kt)("li",{parentName:"ol"},"Connect the output of the first Text node to ",(0,i.kt)("inlineCode",{parentName:"li"},"Input 1")," of the Join Node."),(0,i.kt)("li",{parentName:"ol"},"Connect the output of the second Text node to ",(0,i.kt)("inlineCode",{parentName:"li"},"Input 2")," of the Join Node."),(0,i.kt)("li",{parentName:"ol"},"Leave the ",(0,i.kt)("inlineCode",{parentName:"li"},"Join String")," setting as the default value (",(0,i.kt)("inlineCode",{parentName:"li"},"\\n"),").")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Joined")," output of the Join Node will now be ",(0,i.kt)("inlineCode",{parentName:"p"},'"Hello\\nWorld"'),"."),(0,i.kt)("h3",{id:"example-2-joining-an-array-with-a-custom-delimiter"},"Example 2: Joining an Array with a Custom Delimiter"),(0,i.kt)("p",null,"Imagine you have an Array node with the value ",(0,i.kt)("inlineCode",{parentName:"p"},'["One", "Two", "Three"]')," and you want to join these values with a ",(0,i.kt)("inlineCode",{parentName:"p"},"/")," delimiter. Here's how to do it:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Add a Join Node to your graph."),(0,i.kt)("li",{parentName:"ol"},"Connect the output of the Array node to ",(0,i.kt)("inlineCode",{parentName:"li"},"Input 1")," of the Join Node."),(0,i.kt)("li",{parentName:"ol"},"Change the ",(0,i.kt)("inlineCode",{parentName:"li"},"Join String")," setting to ",(0,i.kt)("inlineCode",{parentName:"li"},'"/"'),".")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Joined")," output of the Join Node will now be ",(0,i.kt)("inlineCode",{parentName:"p"},'"One/Two/Three"'),"."),(0,i.kt)("h3",{id:"example-3-connecting-a-split-node-to-a-join-node"},"Example 3: Connecting a Split Node to a Join Node"),(0,i.kt)("p",null,"Suppose you have a node with ",(0,i.kt)("inlineCode",{parentName:"p"},"Split")," enabled, which runs N times in parallel and outputs an array of results. If you want to join these results into a single string, you can do the following:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Add a Join Node to your graph."),(0,i.kt)("li",{parentName:"ol"},"Connect the output of the node with ",(0,i.kt)("inlineCode",{parentName:"li"},"Split")," enabled to ",(0,i.kt)("inlineCode",{parentName:"li"},"Input 1")," of the Join Node."),(0,i.kt)("li",{parentName:"ol"},"Set the ",(0,i.kt)("inlineCode",{parentName:"li"},"Join String")," setting to the delimiter you want to use.")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Joined")," output of the Join Node will now be a string that joins all the results from the Split node. For instance, if the Split node outputs ",(0,i.kt)("inlineCode",{parentName:"p"},'["Hello", "World"]')," and the ",(0,i.kt)("inlineCode",{parentName:"p"},"Join String")," is ",(0,i.kt)("inlineCode",{parentName:"p"},'" "'),", the ",(0,i.kt)("inlineCode",{parentName:"p"},"Joined")," output will be ",(0,i.kt)("inlineCode",{parentName:"p"},'"Hello World"'),"."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Dynamic Join String:")," The Join Node allows for dynamic join strings. If you have a node that generates a delimiter string dynamically, you can use this as your join string by enabling the ",(0,i.kt)("inlineCode",{parentName:"p"},"Use Join String Input")," setting and connecting the output of that node to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Join String")," input of the Join Node.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Multiple Inputs:")," The Join Node can handle any number of inputs. If you have several nodes generating strings and you want to join all of them, you can simply connect all of them to the Join Node. The Join Node will automatically adjust the number of ",(0,i.kt)("inlineCode",{parentName:"p"},"Input [i]")," inputs based on the number of connections.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Handling Missing Inputs:")," If an input is missing or not a string, the Join Node will simply ignore it during the joining process. This can be useful when dealing with optional inputs that may not always be present.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Special Characters as Delimiters:")," You can use special characters as delimiters. This includes newline (",(0,i.kt)("inlineCode",{parentName:"p"},"\\n"),"), tab (",(0,i.kt)("inlineCode",{parentName:"p"},"\\t"),"), and space (",(0,i.kt)("inlineCode",{parentName:"p"}," "),")."))),(0,i.kt)("h2",{id:"flattening-arrays"},"Flattening Arrays"),(0,i.kt)("p",null,"The Join Node has a ",(0,i.kt)("inlineCode",{parentName:"p"},"Flatten")," setting. When enabled, this setting treats each element of an array input as a separate string to be joined. This is particularly useful when you're dealing with array inputs and want to concatenate all elements of an array into a single string."),(0,i.kt)("p",null,"Flattening in the Join Node works similarly to the ",(0,i.kt)("a",{parentName:"p",href:"./array"},"Array Node"),". For more information on how flattening works, refer to the documentation for the Array Node."),(0,i.kt)("h2",{id:"error-handling"},"Error Handling"),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"Use Join String Input")," is enabled but no valid ",(0,i.kt)("inlineCode",{parentName:"p"},"Join String")," input is provided, the Join Node will default to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Join String")," specified in the node data. If no valid string inputs are provided, the output will be an empty string."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Q: What happens if I connect a non-string node to the Join Node?")),(0,i.kt)("p",null,"A: The Join Node is designed to work with string inputs. If a non-string input is connected, the node will attempt to convert it to a string. If this conversion isn't possible, the input will be ignored during the joining process."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Q: Can I connect an Array Node to the Join Node?")),(0,i.kt)("p",null,"A: Yes, you can connect an Array Node to the Join Node. If the ",(0,i.kt)("inlineCode",{parentName:"p"},"Flatten")," setting is enabled, each element of the array will be treated as a separate string to be joined. If ",(0,i.kt)("inlineCode",{parentName:"p"},"Flatten")," is disabled, the array will be converted to a string representation and then joined."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Q: What happens if I use a dynamic join string but the input is missing or not a string?")),(0,i.kt)("p",null,"A: If the ",(0,i.kt)("inlineCode",{parentName:"p"},"Use Join String Input")," setting is enabled but no valid ",(0,i.kt)("inlineCode",{parentName:"p"},"Join String")," input is provided, the Join Node will default to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Join String")," specified in the node data."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Q: How does the Join Node handle empty strings or null values?")),(0,i.kt)("p",null,"A: The Join Node will ignore any inputs that are null or not a string. Empty strings, however, will be included in the join operation. For example, if your inputs are ",(0,i.kt)("inlineCode",{parentName:"p"},'"Hello"'),", ",(0,i.kt)("inlineCode",{parentName:"p"},'""'),", and ",(0,i.kt)("inlineCode",{parentName:"p"},'"World"'),", and your join string is ",(0,i.kt)("inlineCode",{parentName:"p"},'" "'),", the output will be ",(0,i.kt)("inlineCode",{parentName:"p"},'"Hello  World"'),' (note the extra space between "Hello" and "World").'),(0,i.kt)("h2",{id:"see-also"},"See Also"))}k.isMDXComponent=!0},1350:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/join-node-1d6f0a6eecfb4046dbf63b38756d1dd3.png"}}]);