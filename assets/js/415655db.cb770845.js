"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9751],{1042:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>g});var r=n(3249);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),u=c(n),d=i,g=u["".concat(s,".").concat(d)]||u[d]||f[d]||o;return n?r.createElement(g,a(a({ref:t},l),{},{components:n})):r.createElement(g,a({ref:t},l))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=d;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[u]="string"==typeof e?e:i,a[1]=p;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},303:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>f,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var r=n(7396),i=(n(3249),n(1042));const o={},a="Settings",p={unversionedId:"api-reference/core/Settings",id:"api-reference/core/Settings",title:"Settings",description:"Description",source:"@site/docs/api-reference/core/Settings.mdx",sourceDirName:"api-reference/core",slug:"/api-reference/core/Settings",permalink:"/docs/api-reference/core/Settings",draft:!1,editUrl:"https://github.com/ironclad/rivet/tree/main/packages/docs/docs/api-reference/core/Settings.mdx",tags:[],version:"current",frontMatter:{},sidebar:"apiReference",previous:{title:"Project",permalink:"/docs/api-reference/core/Project"}},s={},c=[{value:"Description",id:"description",level:2},{value:"Definition",id:"definition",level:2},{value:"Properties",id:"properties",level:2},{value:"openAiKey",id:"openaikey",level:3},{value:"openAiOrganization",id:"openaiorganization",level:3},{value:"Usage",id:"usage",level:2},{value:"See Also",id:"see-also",level:2}],l={toc:c},u="wrapper";function f(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"settings"},"Settings"),(0,i.kt)("h2",{id:"description"},"Description"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Settings")," is an interface that encapsulates the configuration options required for the integration with OpenAI services in the graph execution process."),(0,i.kt)("h2",{id:"definition"},"Definition"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface Settings {\n  openAiKey: string;\n  openAiOrganization?: string;\n}\n")),(0,i.kt)("h2",{id:"properties"},"Properties"),(0,i.kt)("h3",{id:"openaikey"},"openAiKey"),(0,i.kt)("p",null,"Type: ",(0,i.kt)("inlineCode",{parentName:"p"},"string")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"openAiKey")," property represents the API key for OpenAI. This key is used to authenticate your application with OpenAI services. It is a required property for the ",(0,i.kt)("inlineCode",{parentName:"p"},"Settings")," interface."),(0,i.kt)("h3",{id:"openaiorganization"},"openAiOrganization"),(0,i.kt)("p",null,"Type: ",(0,i.kt)("inlineCode",{parentName:"p"},"string")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"openAiOrganization")," property represents the organization ID to use for OpenAI. Use this if your API key's default organization is not the one you want to use. This property is optional."),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Settings")," interface is part of the ",(0,i.kt)("inlineCode",{parentName:"p"},"RunGraphOptions")," type and is used to provide OpenAI-specific settings for the graph execution process."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const options: RunGraphOptions = {\n  // Other properties...\n  settings: {\n    openAiKey: 'your-openai-key',\n    openAiOrganization: 'your-openai-organization-id',\n  },\n};\n")),(0,i.kt)("h2",{id:"see-also"},"See Also"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"../node/RunGraphOptions"},"RunGraphOptions")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://platform.openai.com/docs/api-reference/authentication"},"OpenAI Documentation")," (for more information about OpenAI keys and organization IDs)")))}f.isMDXComponent=!0}}]);