"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8650],{1042:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>v});var n=t(3249);function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,i=function(e,r){if(null==e)return{};var t,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(i[t]=e[t]);return i}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=n.createContext({}),s=function(e){var r=n.useContext(p),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},c=function(e){var r=s(e.components);return n.createElement(p.Provider,{value:r},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},f=n.forwardRef((function(e,r){var t=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(t),f=i,v=u["".concat(p,".").concat(f)]||u[f]||d[f]||a;return t?n.createElement(v,o(o({ref:r},c),{},{components:t})):n.createElement(v,o({ref:r},c))}));function v(e,r){var t=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=f;var l={};for(var p in r)hasOwnProperty.call(r,p)&&(l[p]=r[p]);l.originalType=e,l[u]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<a;s++)o[s]=t[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"},7614:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var n=t(7396),i=(t(3249),t(1042));const a={},o="API Overview",l={unversionedId:"api-reference/node/overview",id:"api-reference/node/overview",title:"API Overview",description:"This is the API overview for the @ironclad/rivet-node Node.js library. Each of the exports in the api.ts file is documented in its own page, as linked below:",source:"@site/docs/api-reference/node/overview.mdx",sourceDirName:"api-reference/node",slug:"/api-reference/node/overview",permalink:"/docs/api-reference/node/overview",draft:!1,editUrl:"https://github.com/ironclad/rivet/tree/main/packages/docs/docs/api-reference/node/overview.mdx",tags:[],version:"current",frontMatter:{},sidebar:"apiReference",previous:{title:"Remote Debugging with Rivet",permalink:"/docs/api-reference/remote-debugging"},next:{title:"createProcessor",permalink:"/docs/api-reference/node/createProcessor"}},p={},s=[{value:"Requirements",id:"requirements",level:2},{value:"Core",id:"core",level:2},{value:"Functions",id:"functions",level:2},{value:"Types",id:"types",level:2}],c={toc:s},u="wrapper";function d(e){let{components:r,...t}=e;return(0,i.kt)(u,(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"api-overview"},"API Overview"),(0,i.kt)("p",null,"This is the API overview for the ",(0,i.kt)("inlineCode",{parentName:"p"},"@ironclad/rivet-node")," Node.js library. Each of the exports in the ",(0,i.kt)("inlineCode",{parentName:"p"},"api.ts")," file is documented in its own page, as linked below:"),(0,i.kt)("h2",{id:"requirements"},"Requirements"),(0,i.kt)("p",null,"Rivet node requires Node.js 16 or higher."),(0,i.kt)("h2",{id:"core"},"Core"),(0,i.kt)("p",null,"Every type and method exported from ",(0,i.kt)("inlineCode",{parentName:"p"},"@ironclad/rivet-core")," is re-exported from ",(0,i.kt)("inlineCode",{parentName:"p"},"@ironclad/rivet-node")," for convenience. See the ",(0,i.kt)("a",{parentName:"p",href:"../core/overview"},"core API overview")," for more information."),(0,i.kt)("p",null,"Sure, I can help you with that. Here's how you could update the API overview:"),(0,i.kt)("h2",{id:"functions"},"Functions"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./loadProjectFromFile"},"loadProjectFromFile"),": This function loads a project from a given file path."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./loadProjectFromString"},"loadProjectFromString"),": This function loads a project from a string content."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./runGraphInFile"},"runGraphInFile"),": This function runs a graph in a file with the provided options."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./createProcessor"},"createProcessor"),": This function creates a processor for a given project with specific options."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./runGraph"},"runGraph"),": This function runs a graph for a given project with specific options."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./startDebuggerServer"},"startDebuggerServer"),": This function starts a debugger server with the provided options.")),(0,i.kt)("h2",{id:"types"},"Types"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./LooseDataValue"},"LooseDataValue"),": This type represents a loose data value that can be a ",(0,i.kt)("inlineCode",{parentName:"li"},"DataValue"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"number"),", or ",(0,i.kt)("inlineCode",{parentName:"li"},"boolean"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./RunGraphOptions"},"RunGraphOptions"),": This type represents the options that can be provided when running a graph."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./RivetDebuggerServer"},"RivetDebuggerServer"),": This type represents a debugger server instance with a WebSocketServer and several methods for handling events and processor interaction."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./DebuggerEvents"},"DebuggerEvents"),": This type represents the events that can be emitted by the debugger server.")),(0,i.kt)("p",null,"Please visit each page for detailed information on each export, including usage examples and type definitions."))}d.isMDXComponent=!0}}]);