import { ChartNode } from './NodeBase';
import { UserInputNode } from './nodes/UserInputNode';
import { NodeImpl } from './NodeImpl';
import { TextNode } from './nodes/TextNode';
import { ChatNode } from './nodes/ChatNode';
import { PromptNode } from './nodes/PromptNode';
import { ExtractRegexNode } from './nodes/ExtractRegexNode';
import { CodeNode } from './nodes/CodeNode';
import { MatchNode } from './nodes/MatchNode';
import { IfNode } from './nodes/IfNode';
import { ReadDirectoryNode } from './nodes/ReadDirectoryNode';
import { ReadFileNode } from './nodes/ReadFileNode';
import { IfElseNode } from './nodes/IfElseNode';
import { ChunkNode } from './nodes/ChunkNode';
import { GraphInputNode } from './nodes/GraphInputNode';
import { GraphOutputNode } from './nodes/GraphOutputNode';
import { SubGraphNode } from './nodes/SubGraphNode';
import { ArrayNode } from './nodes/ArrayNode';
import { ExtractJsonNode } from './nodes/ExtractJsonNode';
import { AssemblePromptNode } from './nodes/AssemblePromptNode';
import { LoopControllerNode } from './nodes/LoopControllerNode';
import { TrimChatMessagesNode } from './nodes/TrimChatMessagesNode';
import { ExtractYamlNode } from './nodes/ExtractYamlNode';
import { ExternalCallNode } from './nodes/ExternalCallNode';
import { ExtractObjectPathNode } from './nodes/ExtractObjectPathNode';
import { RaiseEventNode } from './nodes/RaiseEventNode';
import { ContextNode } from './nodes/ContextNode';
import { CoalesceNode } from './nodes/CoalesceNode';
import { PassthroughNode } from './nodes/PassthroughNode';
import { PopNode } from './nodes/PopNode';
import { SetGlobalNode } from './nodes/SetGlobalNode';
import { GetGlobalNode } from './nodes/GetGlobalNode';
export type Nodes = UserInputNode | TextNode | ChatNode | PromptNode | ExtractRegexNode | CodeNode | MatchNode | IfNode | ReadDirectoryNode | ReadFileNode | IfElseNode | ChunkNode | GraphInputNode | GraphOutputNode | SubGraphNode | ArrayNode | ExtractJsonNode | ExtractYamlNode | ExtractObjectPathNode | AssemblePromptNode | LoopControllerNode | TrimChatMessagesNode | ExternalCallNode | RaiseEventNode | ContextNode | CoalesceNode | PassthroughNode | PopNode | SetGlobalNode | GetGlobalNode;
export * from './nodes/UserInputNode';
export * from './nodes/TextNode';
export * from './nodes/ChatNode';
export * from './nodes/PromptNode';
export * from './nodes/ExtractRegexNode';
export * from './nodes/CodeNode';
export * from './nodes/MatchNode';
export * from './nodes/IfNode';
export * from './nodes/ReadDirectoryNode';
export * from './nodes/ReadFileNode';
export * from './nodes/IfElseNode';
export * from './nodes/ChunkNode';
export * from './nodes/GraphInputNode';
export * from './nodes/GraphOutputNode';
export * from './nodes/SubGraphNode';
export * from './nodes/ArrayNode';
export * from './nodes/ExtractJsonNode';
export * from './nodes/ExtractYamlNode';
export * from './nodes/AssemblePromptNode';
export * from './nodes/LoopControllerNode';
export * from './nodes/TrimChatMessagesNode';
export * from './nodes/ExternalCallNode';
export * from './nodes/ExtractObjectPathNode';
export * from './nodes/RaiseEventNode';
export * from './nodes/ContextNode';
export * from './nodes/CoalesceNode';
export * from './nodes/PassthroughNode';
export * from './nodes/PopNode';
export * from './nodes/SetGlobalNode';
export * from './nodes/GetGlobalNode';
export type NodeType = Nodes['type'];
export declare const createNodeInstance: <T extends Nodes>(node: T) => NodeImpl<ChartNode>;
export declare function createUnknownNodeInstance(node: ChartNode): NodeImpl<ChartNode>;
export declare function nodeFactory(type: NodeType): Nodes;
export declare const nodeDisplayName: Record<NodeType, string>;
export type NodeOfType<T extends NodeType> = Extract<Nodes, {
    type: T;
}>;
